AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ApplicationName:
    Type: String
    Default: CPS-KafkaStack
  AvailabilityZone1: 
    Type: String
    Default: us-east-1a
  AvailabilityZone2: 
    Type: String
    Default: us-east-1b
  AvailabilityZone3: 
    Type: String
    Default: us-east-1c
  KafkaEC2Instance:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m5.large
  KafkaMskClusterInstance:
    Type: String
    Default: kafka.t3.small
    AllowedValues:
      - kafka.t3.small
      - kafka.m5.large
      - kafka.m5.xlarge
      - kafka.m5.2xlarge
      - kafka.m5.4xlarge
      - kafka.m5.8xlarge
      - kafka.m5.12xlarge
      - kafka.m5.16xlarge
      - kafka.m5.24xlarge
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Can contain only ASCII characters.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicOne:
      CIDR: 10.0.0.0/24
    PrivateOne:
      CIDR: 10.0.1.0/24
    PrivateTwo:
      CIDR: 10.0.2.0/24
    PrivateThree:
      CIDR: 10.0.3.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref ApplicationName, "VPC"]]
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: AvailabilityZone1
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - PublicOne
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref ApplicationName, "PublicSubnet"]]
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: AvailabilityZone1
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - PrivateOne
        - CIDR
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref ApplicationName, "PrivateSubnetOne"]]
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: AvailabilityZone2
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - PrivateTwo
        - CIDR
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref ApplicationName, "PrivateSubnetTwo"]]
  PrivateSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: AvailabilityZone3
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - PrivateThree
        - CIDR
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref ApplicationName, "PrivateSubnetThree"]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetOne
      RouteTableId:
        Ref: PublicRouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnetOne
  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnetTwo
  PrivateSubnetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnetThree
  KafkaClientInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp:
          Ref: SSHLocation
  MSKSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 2181
        ToPort: 2181
        SourceSecurityGroupId:
          Fn::GetAtt:
          - KafkaClientInstanceSecurityGroup
          - GroupId
      - IpProtocol: tcp
        FromPort: 9094
        ToPort: 9094
        SourceSecurityGroupId:
          Fn::GetAtt:
          - KafkaClientInstanceSecurityGroup
          - GroupId
      - IpProtocol: tcp
        FromPort: 9092
        ToPort: 9092
        SourceSecurityGroupId:
          Fn::GetAtt:
          - KafkaClientInstanceSecurityGroup
          - GroupId
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref ApplicationName, "MSKSecurityGroup"]]
  KafkaClientEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: KafkaEC2Instance
      KeyName:
        Ref: KeyName
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      AvailabilityZone:
        Ref: AvailabilityZone1
      SubnetId:
        Ref: PublicSubnetOne
      SecurityGroupIds:
      - Fn::GetAtt:
        - KafkaClientInstanceSecurityGroup
        - GroupId
      ImageId: ami-0dc2d3e4c0f9ebd18
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref ApplicationName, "ClientInstance"]]
      UserData:
        Fn::Base64: "
          #!/bin/bash\n
            yum update -y \n
            yum install python3.7 -y\n
            yum install java-1.8.0-openjdk-devel -y\n
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
            . ~/.nvm/nvm.sh
            nvm install node
            cd /home/ec2-user\n
            echo\"export PATH=.local/bin:$PATH\" >> .bash_profile\nmkdir kafka\n
            cd kafka\n
            wget https://archive.apache.org/dist/kafka/2.2.1/kafka_2.12-2.2.1.tgz\n
            tar -xzf kafka_2.12-2.2.1.tgz\n
            cd /home/ec2-user\n
            su -c \"python3.7 get-pip.py --user\" -s /bin/sh ec2-user\n
          \n"
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonMSKFullAccess
      - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join ["-", [!Ref ApplicationName, "EC2InstanceProfile"]]
      Roles:
      - Ref: EC2Role
  MSKCluster:
    Type: AWS::MSK::Cluster
    Properties:
      BrokerNodeGroupInfo:
        ClientSubnets:
        - Ref: PrivateSubnetOne
        - Ref: PrivateSubnetTwo
        - Ref: PrivateSubnetThree
        InstanceType:
          Ref: KafkaMskClusterInstance
        SecurityGroups:
        - Fn::GetAtt:
          - MSKSecurityGroup
          - GroupId
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 100
      ClusterName: !Join ["-", [!Ref ApplicationName, "MSKCluster"]]
      KafkaVersion: 2.6.1
      NumberOfBrokerNodes: 3
Outputs:
  VPCId:
    Description: The ID of the VPC created
    Value:
      Ref: VPC
  PublicSubnetOne:
    Description: The name of the public subnet created
    Value:
      Ref: PublicSubnetOne
  PrivateSubnetOne:
    Description: The ID of private subnet one created
    Value:
      Ref: PrivateSubnetOne
  PrivateSubnetTwo:
    Description: The ID of private subnet two created
    Value:
      Ref: PrivateSubnetTwo
  PrivateSubnetThree:
    Description: The ID of private subnet three created
    Value:
      Ref: PrivateSubnetThree
  MSKSecurityGroupID:
    Description: The ID of the security group created for the MSK clusters
    Value:
      Fn::GetAtt:
      - MSKSecurityGroup
      - GroupId
  KafkaClientEC2InstancePublicDNS:
    Description: The Public DNS for the MirrorMaker EC2 instance
    Value:
      Fn::GetAtt:
      - KafkaClientEC2Instance
      - PublicDnsName
  MSKClusterArn:
    Description: The Arn for the MSKCluster MSK cluster
    Value:
      Ref: MSKCluster
